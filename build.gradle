plugins {
    id "com.matthewprenger.cursegradle" version "1.0.8" apply false
}

repositories { jcenter() }

subprojects {
    project.ext.modid = "achievementbooks"
    apply plugin: "java"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

def getVersionAppendage() {
    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return proc.exitValue() ? "" : proc.text.trim()
}

task cleanUpMinecraftRunClutter {
    doLast {
        delete "${rootDir}/classes"
        delete "${rootDir}/out"
    }
}


configure(subprojects.findAll { it.name != 'core' &&  it.name != 'mccore'  }) {
    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile "org.mockito:mockito-core:2.+"
    }
    sourceSets {
        main {
            java {
                srcDirs += project(":core").sourceSets.main.java.srcDirs
            }
        }

        test {
            java.srcDirs += ['src/test/java']
        }
    }

    apply plugin: 'com.matthewprenger.cursegradle'

    clean.dependsOn cleanUpMinecraftRunClutter

    boolean dev = System.getenv("RELEASE") == null || System.getenv("RELEASE").equalsIgnoreCase("false")


    if (project.property("release_type").equalsIgnoreCase("release")) {
        version = "${tag_name}-MC${minecraft_version}"
    } else {
        if (project.hasProperty("build_number")) {
            version = "${mod_version}b${build_number}-MC${minecraft_version}"
        } else {
            version = "${mod_version}b${getVersionAppendage()}-MC${minecraft_version}"
        }
    }

    tasks.curseforge.enabled = !dev && project.hasProperty('curseforge_key')

    curseforge {
        if (project.hasProperty('curseforge_key')) {
            apiKey = project.curseforge_key
        }

        project {
            id = project.projectId
            changelog = project.file("CHANGELOG.md").getText() + "\n\n##Overall changes\n\n" + project.parent.file("CHANGELOG.md").getText()
            changelogType = 'markdown'
            releaseType = project.release_type
            mainArtifact(jar) {
                displayName = "Achievement Books ${version}"
            }
        }
    }
}

String distDir = System.getenv("DIST_DIR");
if (distDir == null) {
    distDir = "dist"
}

task collect(type: Copy) {

    from(subprojects.collect { "${it.buildDir}/libs" })
    into distDir


}
